Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LC_ALL
    SETLOCALE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> IDENTIFIER ( arguments )
Rule 3     expression -> READ ( STRING )
Rule 4     expression -> NEIGH ( STRING )
Rule 5     expression -> SEND NUMBER
Rule 6     arguments -> argument
Rule 7     arguments -> argument , arguments
Rule 8     argument -> expression

Terminals, with rules where they appear

(                    : 2 3 4
)                    : 2 3 4
,                    : 7
IDENTIFIER           : 2
LC_ALL               : 
NEIGH                : 4
NUMBER               : 5
READ                 : 3
SEND                 : 5
SETLOCALE            : 
STRING               : 3 4
error                : 

Nonterminals, with rules where they appear

argument             : 6 7
arguments            : 2 7
expression           : 1 8
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . IDENTIFIER ( arguments )
    (3) expression -> . READ ( STRING )
    (4) expression -> . NEIGH ( STRING )
    (5) expression -> . SEND NUMBER

    IDENTIFIER      shift and go to state 3
    READ            shift and go to state 4
    NEIGH           shift and go to state 5
    SEND            shift and go to state 6

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .

    $end            reduce using rule 1 (statement -> expression .)


state 3

    (2) expression -> IDENTIFIER . ( arguments )

    (               shift and go to state 7


state 4

    (3) expression -> READ . ( STRING )

    (               shift and go to state 8


state 5

    (4) expression -> NEIGH . ( STRING )

    (               shift and go to state 9


state 6

    (5) expression -> SEND . NUMBER

    NUMBER          shift and go to state 10


state 7

    (2) expression -> IDENTIFIER ( . arguments )
    (6) arguments -> . argument
    (7) arguments -> . argument , arguments
    (8) argument -> . expression
    (2) expression -> . IDENTIFIER ( arguments )
    (3) expression -> . READ ( STRING )
    (4) expression -> . NEIGH ( STRING )
    (5) expression -> . SEND NUMBER

    IDENTIFIER      shift and go to state 3
    READ            shift and go to state 4
    NEIGH           shift and go to state 5
    SEND            shift and go to state 6

    arguments                      shift and go to state 11
    argument                       shift and go to state 12
    expression                     shift and go to state 13

state 8

    (3) expression -> READ ( . STRING )

    STRING          shift and go to state 14


state 9

    (4) expression -> NEIGH ( . STRING )

    STRING          shift and go to state 15


state 10

    (5) expression -> SEND NUMBER .

    $end            reduce using rule 5 (expression -> SEND NUMBER .)
    ,               reduce using rule 5 (expression -> SEND NUMBER .)
    )               reduce using rule 5 (expression -> SEND NUMBER .)


state 11

    (2) expression -> IDENTIFIER ( arguments . )

    )               shift and go to state 16


state 12

    (6) arguments -> argument .
    (7) arguments -> argument . , arguments

    )               reduce using rule 6 (arguments -> argument .)
    ,               shift and go to state 17


state 13

    (8) argument -> expression .

    ,               reduce using rule 8 (argument -> expression .)
    )               reduce using rule 8 (argument -> expression .)


state 14

    (3) expression -> READ ( STRING . )

    )               shift and go to state 18


state 15

    (4) expression -> NEIGH ( STRING . )

    )               shift and go to state 19


state 16

    (2) expression -> IDENTIFIER ( arguments ) .

    $end            reduce using rule 2 (expression -> IDENTIFIER ( arguments ) .)
    ,               reduce using rule 2 (expression -> IDENTIFIER ( arguments ) .)
    )               reduce using rule 2 (expression -> IDENTIFIER ( arguments ) .)


state 17

    (7) arguments -> argument , . arguments
    (6) arguments -> . argument
    (7) arguments -> . argument , arguments
    (8) argument -> . expression
    (2) expression -> . IDENTIFIER ( arguments )
    (3) expression -> . READ ( STRING )
    (4) expression -> . NEIGH ( STRING )
    (5) expression -> . SEND NUMBER

    IDENTIFIER      shift and go to state 3
    READ            shift and go to state 4
    NEIGH           shift and go to state 5
    SEND            shift and go to state 6

    argument                       shift and go to state 12
    arguments                      shift and go to state 20
    expression                     shift and go to state 13

state 18

    (3) expression -> READ ( STRING ) .

    $end            reduce using rule 3 (expression -> READ ( STRING ) .)
    ,               reduce using rule 3 (expression -> READ ( STRING ) .)
    )               reduce using rule 3 (expression -> READ ( STRING ) .)


state 19

    (4) expression -> NEIGH ( STRING ) .

    $end            reduce using rule 4 (expression -> NEIGH ( STRING ) .)
    ,               reduce using rule 4 (expression -> NEIGH ( STRING ) .)
    )               reduce using rule 4 (expression -> NEIGH ( STRING ) .)


state 20

    (7) arguments -> argument , arguments .

    )               reduce using rule 7 (arguments -> argument , arguments .)

